## <NAME>
## 
## DESCRIPTION
## 
## Rules
## -----
##

configfile: "config/config.yml"

onstart:
    print("##### running pipeline  #####\n") 
    # shell("mkdir -p jobs/printContent")

TOOL_DIR = "tools"

module combfold_folder:
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/folding.smk",
            tag="v0.2.2")
  config: config

module combfold_helper:
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/helpers.smk",
            tag="v0.2.2")
  config: config

module combfold:
  """Needs
  [submodule "workflow/scripts/dependencies/CombFold"]
  	path = tools/CombFold
	  url = git@github.com:Luke-ebbis/CombFold.git
  """
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/CombFold.smk",
            tag="v0.2.2")
  config: config


use rule * from combfold_helper
use rule * from combfold_folder
use rule * from combfold

# input overide
use rule preprocess from combfold as new_preprocess with:
  input: "results/known/jobs/{name}.json"
  output:
    "results/data/{name}/{name}.json"

## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"


## clean:                     
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/checkpoints/install_easy_graph")
  shell:
    """
    echo "Installing easy graph"
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
