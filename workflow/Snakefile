## Running predictions on protein sequences from the PDB
##
## This pipeline runs predictions on protein sequences, as taken from the
## protein structures and chain names on rcsb pdb.
##
## Rules
## -----
##

configfile: "config/config.yml"

rule all:
  message: f"Analysing the entries {config['assess']}"
  input:
    expand("results/data/{name}/combfold",
        name=config['assess'])


localrules: 
  preprocess,
  download,
  preprocess,
  new_convert,
  fasta,
  format_combfold_job,
  help,
  build_overview,
  install_easy_graph,
  build_ascii_graph,
  setup_combfold, 
  produce_fasta_pairs, 
  gather_pdb_pairs, 
  produce_fasta_groups, 
  gather_pdb_groups,
  gather_pdb,
  crop,
  us_align_pymol_session,
  us_align_pymol_picture,


# onstart:
    # print(f"##### running pipeline  #####\n {config}")

# TODO unify thise variables
TOOLS_DIR = "tools"
TOOL_DIR = TOOLS_DIR
module combfold_folder:
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/folding.smk",
            branch="dev-27")
  config: config

module combfold_helper:
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/helpers.smk",
            branch="dev-27")
  config: config



module combfold:
  """Needs
  [submodule "workflow/scripts/dependencies/CombFold"]
  	path = tools/CombFold
	  url = git@github.com:Luke-ebbis/CombFold.git
  """
  snakefile:
        github("Luke-ebbis/complex-prediction", path="workflow/rules/CombFold.smk",
            branch="dev-27")
  config: config


module analysis:
  snakefile:
        github("Luke-ebbis/protein-structure-comparison", path="workflow/Snakefile",
            tag="dev")
  config: config

use rule * from combfold_helper
use rule * from combfold_folder
use rule * from combfold
use rule * from analysis exclude build_ascii_graph as analysis_*

ruleorder: download > new_convert


use rule preprocess from combfold as new_preprocess with:
  input: "results/known/jobs/{name}.json"
  output:
    "results/data/{name}/{name}.json"


use rule download_rcsb from analysis as download with:
  output: "results/known/download/{identifier}.{ext}"

use rule convert from analysis as new_convert with:
  input: "results/known/download/{identifier}.cif"
  output: "results/known/pdb/{identifier}.pdb"

use rule fasta from analysis as fasta with:
  input: "results/known/pdb/{identifier}.pdb"
  output: "results/known/fasta/{identifier}.fasta"


def get_combfold_structures_here(wildcards):
  output_folder = checkpoints.combfold.get(**wildcards).output[0]
  pdbs = [f for f in os.listdir(f"{output_folder}/assembled_results") if 
    f.endswith(".pdb") or f.endswith("cif")].pop()
  return f"{output_folder}/assembled_results/{pdbs}"



use rule us_align from analysis as us_align with:
  input:
    x=get_combfold_structures_here,
    y="results/known/pdb/{protein_complex}.pdb",
  output: "results/comparison/{protein_complex}.usalign.txt"


use rule us_align_sup from analysis as us_align_sup with:
  input:
    x=get_combfold_structures_here,
    y="results/known/pdb/{protein_complex}.pdb",
  output: "results/comparison/{protein_complex}.usalign.sup"


use rule us_align_pymol_session from analysis as us_align_pymol_session with:
  input:
    x=get_combfold_structures_here,
    y="results/known/pdb/{protein_complex}.pdb",
    superposition="results/comparison/{x}-{y}.usalign.sup"
  output: "results/comparison/{protein_complex}.usalign.sup.pse"



use rule us_align_pymol_picture from analysis as us_align_pymol_picture with:
  input: "results/comparison/{protein_complex}.usalign.sup"
  output: "results/comparison/{protein_complex}.usalign.sup.png"

use rule crop from analysis as crop with:
  input: "results/comparison/{protein_complex}.usalign.sup.png"
  output: "results/comparison/{protein_complex}.usalign.sup.crop.png"


rule format_combfold_job:
  conda: "envs/python.yml"
  input: "results/known/fasta/{identifier}.fasta"
  output: "results/data/{identifier}/{identifier}.json"
  params:
    script=workflow.source_path("scripts/fasta2combfold.py")
  shell:
    """
    python3 {params.script} {input} {output}
    """


## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"


## clean:                     
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/.checkpoints/easy_graph")
  shell:
    """
    echo "Installing easy graph"
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
